- name: copy k8s images
  copy:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
  with_items:
  - { src: 'file/k8s.tar.bz2', dest: '{{ path }}' }
  - { src: 'file/flannel.tar.bz2', dest: '{{ path }}' }
  - { src: 'file/dashboard.tar.bz2', dest: '{{ path }}' }
  run_once: true

- name: load k8s images
  docker_image:
    load_path: '{{ path }}/{{ item }}'
    name: k8s
    timeout: 600
  with_items:
  - k8s.tar.bz2
  - flannel.tar.bz2
  - dashboard.tar.bz2
  run_once: true

- name: docker login
  docker_login:
    registry: '{{ registry_endpoint }}'
    username: '{{ registry_user }}'
    password: '{{ registry_password }}'
    reauthorize: true
  run_once: true

- name: tag images
  docker_image:
    name: '{{ item.repo }}/{{ item.name }}'
    repository: '{{ registry_endpoint }}/{{ registry_project }}/{{ item.name }}'
    tag: '{{ item.tag }}'
  with_items:
  - { repo: '{{ kubernetes_repo }}', name: 'kube-controller-manager', tag: '{{ kubernetes_version }}' }
  - { repo: '{{ kubernetes_repo }}', name: 'kube-apiserver', tag: '{{ kubernetes_version }}' }
  - { repo: '{{ kubernetes_repo }}', name: 'kube-scheduler', tag: '{{ kubernetes_version }}' }
  - { repo: '{{ kubernetes_repo }}', name: 'kube-proxy', tag: '{{ kubernetes_version }}' }
  - { repo: '{{ kubernetes_repo }}', name: 'pause', tag: '{{ pause_version }}' }
  - { repo: '{{ kubernetes_repo }}', name: 'coredns', tag: '{{ dns_version }}' }
  - { repo: '{{ flannel_repo }}', name: 'flannel', tag: '{{ flannel_version }}' }
  - { repo: '{{ dashboard_repo }}', name: 'kubernetes-dashboard-amd64', tag: '{{ dashboard_version }}' }
  run_once: true

- name: push images
  docker_image:
    name: '{{ registry_endpoint }}/{{ registry_project }}/{{ item.name }}'
    tag: '{{ item.tag }}'
    push: true
    state: present
  with_items:
  - { repo: '{{ kubernetes_repo }}', name: 'kube-controller-manager', tag: '{{ kubernetes_version }}' }
  - { repo: '{{ kubernetes_repo }}', name: 'kube-apiserver', tag: '{{ kubernetes_version }}' }
  - { repo: '{{ kubernetes_repo }}', name: 'kube-scheduler', tag: '{{ kubernetes_version }}' }
  - { repo: '{{ kubernetes_repo }}', name: 'kube-proxy', tag: '{{ kubernetes_version }}' }
  - { repo: '{{ kubernetes_repo }}', name: 'pause', tag: '{{ pause_version }}' }
  - { repo: '{{ kubernetes_repo }}', name: 'coredns', tag: '{{ dns_version }}' }
  - { repo: '{{ flannel_repo }}', name: 'flannel', tag: '{{ flannel_version }}' }
  - { repo: '{{ dashboard_repo }}', name: 'kubernetes-dashboard-amd64', tag: '{{ dashboard_version }}' }
  run_once: true

- name: generate kubeadm config
  template:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
  with_items:
  - { src: 'template/kubeadm.conf.j2', dest: '{{ path }}/kubeadm.conf' }
  - { src: 'template/kube-flannel.yml.j2', dest: '{{ path }}/kube-flannel.yml' }
  - { src: 'template/kubernetes-dashboard.yml.j2', dest: '{{ path }}/kubernetes-dashboard.yml' }

- name: copy certificates JSON files
  copy:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
  with_items:
  - { src: 'file/ca-csr.json', dest: '{{ path }}/' }
  - { src: 'file/ca-config.json', dest: '{{ path }}/' }
  - { src: 'file/apiserver-csr.json', dest: '{{ path }}/' }
  - { src: 'file/kubelet-csr.json', dest: '{{ path }}/' }
  - { src: 'file/front-proxy-ca-csr.json', dest: '{{ path }}/' }
  - { src: 'file/front-proxy-client-csr.json', dest: '{{ path }}/' }

- name: copy certificates generation scripts
  template:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    mode: 0777
  with_items:
  - { src: 'file/generate-other-certificates.sh', dest: '{{ path }}/' }
  - { src: 'file/generate-apiserver-certificate.sh', dest: '{{ path }}/' }

- name: generate other certificates
  raw: |
    /var/tmp/wise2c/kubernetes/generate-other-certificates.sh
  run_once: true

- name: fetch certificates
  fetch:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    flat: true
  with_items:
  - { src: '/etc/kubernetes/pki/ca.crt', dest: 'file/ca.crt' }
  - { src: '/etc/kubernetes/pki/ca.key', dest: 'file/ca.key' }
  - { src: '/etc/kubernetes/pki/apiserver-kubelet-client.crt', dest: 'file/apiserver-kubelet-client.crt' }
  - { src: '/etc/kubernetes/pki/apiserver-kubelet-client.key', dest: 'file/apiserver-kubelet-client.key' }
  - { src: '/etc/kubernetes/pki/front-proxy-ca.crt', dest: 'file/front-proxy-ca.crt' }
  - { src: '/etc/kubernetes/pki/front-proxy-ca.key', dest: 'file/front-proxy-ca.key' }
  - { src: '/etc/kubernetes/pki/front-proxy-client.crt', dest: 'file/front-proxy-client.crt' }
  - { src: '/etc/kubernetes/pki/front-proxy-client.key', dest: 'file/front-proxy-client.key' }
  - { src: '/etc/kubernetes/pki/sa.pub', dest: 'file/sa.pub' }
  - { src: '/etc/kubernetes/pki/sa.key', dest: 'file/sa.key' }
  run_once: true

- name: copy certificates
  copy:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
  with_items:
  - { src: 'file/ca.crt', dest: '/etc/kubernetes/pki/ca.crt' }
  - { src: 'file/ca.key', dest: '/etc/kubernetes/pki/ca.key' }
  - { src: 'file/apiserver-kubelet-client.crt', dest: '/etc/kubernetes/pki/apiserver-kubelet-client.crt' }
  - { src: 'file/apiserver-kubelet-client.key', dest: '/etc/kubernetes/pki/apiserver-kubelet-client.key' }
  - { src: 'file/front-proxy-ca.crt', dest: '/etc/kubernetes/pki/front-proxy-ca.crt' }
  - { src: 'file/front-proxy-ca.key', dest: '/etc/kubernetes/pki/front-proxy-ca.key' }
  - { src: 'file/front-proxy-client.crt', dest: '/etc/kubernetes/pki/front-proxy-client.crt' }
  - { src: 'file/front-proxy-client.key', dest: '/etc/kubernetes/pki/front-proxy-client.key' }
  - { src: 'file/sa.pub', dest: '/etc/kubernetes/pki/sa.pub' }
  - { src: 'file/sa.key', dest: '/etc/kubernetes/pki/sa.key' }

- name: generate kube-apiserver certificate
  raw: |
    /var/tmp/wise2c/kubernetes/generate-apiserver-certificate.sh

- name: kubeadm init
  shell: |
    kubeadm init --config {{ path }}/kubeadm.conf

- name: fetch admin.conf
  fetch:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    flat: true
  with_items:
  - { src: '/etc/kubernetes/admin.conf', dest: 'file/admin.conf' }
  run_once: true

- name: config kubectl
  shell: |
    cp /etc/kubernetes/admin.conf $HOME/.kube/config
    chown $(id -u):$(id -g) $HOME/.kube/config

- name: apply addons
  shell: |
    kubectl apply -f {{ path }}/kube-flannel.yml
    kubectl apply -f {{ path }}/kubernetes-dashboard.yml
  run_once: true

- name: execute prometheus-fix-master-nodes script
  shell: ./prometheus-fix-master-nodes.sh
  args:
    chdir: '/var/tmp/wise2c/kubernetes/'
